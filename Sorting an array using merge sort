/*
EXAMPLE: 
input : 5 4 3 2 1
output: 1 2 3 4 5
*/
class Solution {
    public int[] sortArray(int[] nums) {
        if (nums.length == 0 || nums.length == 1) return nums;
        mergeSort(nums, 0, nums.length - 1);
        return nums;
    }
    
    void  mergeSort(int[] nums, int l, int r) {
        if (l >= r) return;
        int m = l + ((r - l)/2);
        // System.out.println("l: " + l + ", m: " + m + ", r: " + r);
        mergeSort(nums, l, m);
        mergeSort(nums, m + 1, r);
        merge(nums, l, m, r);
    }
    
    void merge(int[] nums, int l, int m, int r) {
        // System.out.println("merge :l: " + l + ", m: " + m + ", r: " + r);
        int i = l, j = m + 1, p = 0;
        int[] temp = new int[r - l + 1];
        while (i <= m && j <= r) {
            if (nums[i] > nums[j]) {
                // element at index j is smaller than element at index i so place the element at j
                temp[p++] = nums[j++];
            } else {
                temp[p++] = nums[i++];
            }
        }
        
        while (i <= m) {
            temp[p++] = nums[i++];
        }
        
        while (j <= r) {
            temp[p++] = nums[j++];
        }
        
        for (int x = 0 ; x < r - l + 1; x++) {
            nums[x + l] = temp[x];
        }
    }
}

/*
solution 1: using a hashset

Solution 2: Floyd’s Cycle-Finding Algorithm --> faster method
Approach: This is the fastest method and has been described below:
--> Traverse linked list using two pointers.
--> Move one pointer(slow_p) by one and another pointer(fast_p) by two.
--> If these pointers meet at the same node then there is a loop. If pointers do not meet then linked list doesn’t have a loop.

*/

public class Solution {
    public boolean hasCycle(ListNode head) {
        //solution -- 1
        
        HashSet<ListNode> set = new HashSet<>();
        ListNode temp = head;
        while(temp != null){
            if(set.contains(temp)) {
                return true;
            }
           set.add(temp); 
           temp = temp.next;
    }
         return false;
        
        
        /* solution -- 2
        ListNode slow = head, fast = head;
        while(slow != null && fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) return true;
        }
        return false;
        */
    }
}

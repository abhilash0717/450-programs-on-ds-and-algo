// { Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            int n = sc.nextInt();
            String arr[] = new String[n];
            for(int i = 0;i<n;i++)
                arr[i] = sc.next();
            
            Solution ob = new Solution();
            
            System.out.println(ob.secFrequent(arr, n));
        }
    }
}// } Driver Code Ends


//User function Template for Java
/*
Input:
N = 6
arr[] = {aaa, bbb, ccc, bbb, aaa, aaa}
Output: bbb
Explanation: "bbb" is the second most 
occurring string with frequency 2.

HOW I SOLVED THIS POGRAM?
--> FIRST USE A HASHMAP TO STORE THE OCCURENCES OF EACH WORD IN ARRAY
--> USE AN LOOP TO ITERATE THROUGH THE MAP
--> AND FIND THE SECOND MOST REPEATED WORD
--> NOW LOOP AGAIN AND WHICHEVER WORD IS REPEATED SECOND MOST
--> RETURN IT THATS IT
*/
class Solution
{
    String secFrequent(String arr[], int N)
    {
       HashMap<String, Integer> map = new HashMap<>();
       for(int i=0;i<arr.length;i++){
           if(!map.containsKey(arr[i])) map.put(arr[i], 1);
           else{
                int freq = map.get(arr[i]); 
                freq++; 
                map.put(arr[i], freq); 
           } 
       }
       //FINDING THE SECOND MOST REPEATED  VALUE
       int first_max = Integer.MIN_VALUE, sec_max = Integer.MIN_VALUE; 
          
       Iterator<Map.Entry<String, Integer>> itr = map.entrySet().iterator(); 
       while (itr.hasNext())  
       { 
           Map.Entry<String, Integer> entry = itr.next(); 
           int v = entry.getValue(); 
           //System.out.println(entry.getKey()+","+entry.getValue());
           if( v > sec_max) { 
                sec_max = v;
                if(sec_max > first_max){
                    int temp = first_max;
                    first_max = sec_max; 
                    sec_max = temp;
                }
            } 
    
       } 
       
       itr = map.entrySet().iterator(); 
       while (itr.hasNext())  
       { 
           Map.Entry<String, Integer> entry = itr.next(); 
           int v = entry.getValue(); 
           if (v == sec_max) 
                return entry.getKey(); 
       } 
         
          
        return "-1";   
    }
}

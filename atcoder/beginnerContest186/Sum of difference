package atcoderBeginner186;
import java.util.*;
public class D {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		long n = scan.nextLong();
		long[] array = new long[(int) n];
		for(int x=0;x<n;x++) array[x] = scan.nextLong();
		
		Arrays.sort(array);
		long sum = 0;
		for(int i=(int) (n-1);i>=0;i--) {
			 sum += i * array[i] - (n - 1 - i) * array[i]; 
		}
		
		System.out.println(sum);

	}

}

/*
 * A simple solution for this problem is to one by one look for each pair
 *  take their difference and sum up them together.
 *   The time complexity for this approach is O(n2).

An efficient solution for this problem needs a simple observation. 
Since array is sorted and elements are distinct, when we take sum of absolute difference
 of pairs each element in the i’th position is added ‘i’ times
  and subtracted ‘n-1-i’ times.
For example in {1,2,3,4} element at index 2 is arr[2] = 3 so all pairs
 having 3 as one element will be (1,3), (2,3) and (3,4), now when we take 
 summation of absolute difference of pairs, then for all pairs in which 3 
 is present as one element summation will be = (3-1)+(3-2)+(4-3).
  We can see that 3 is added i = 2 times and subtracted n-1-i = (4-1-2) = 1 times.
The generalized expression for each element will be sum = sum + (i*a[i]) – (n-1-i)*a[i]. 
 */

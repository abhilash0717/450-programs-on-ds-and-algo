METHOD 1 --> NATIONAL DUTCH FLAG ALGORITHM
METHOD 2 --> SIMPLE BUILD-IN FUNCTION
METHOD 3 --> WITHOUT BUILT-IN FUNCTION IN O(N) TIME
/*
Example:
Input :
2
5
0 2 1 2 0
3
0 1 0

Output:
0 0 1 2 2
0 0 1
*/
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	Scanner scan = new Scanner(System.in);
	int t = scan.nextInt();
	for(int b=0;b<t;b++){
	    
	    int n = scan.nextInt(); //no of items
	    int[] array = new int[n];
	    for(int z=0;z<n;z++){
	        array[z] = scan.nextInt();
	    }
	//DUTCH NATIONAL FLAG ALGORITHM
	int low=0,high=n-1,mid =0;
		while(mid<=high) {
			switch(array[mid]) {
			case 0:
				int temp1 = array[low];
				array[low] = array[mid];
				array[mid] = temp1;
				low++;
				mid++;
				break;
			case 1:
				mid++;
				break;
			case 2:
				int temp2 = array[mid];
				array[mid] = array[high];
				array[high] = temp2;
				high--;
				break;
			}
		}
		for(int j:array) {
			System.out.print(j+" ");
		}
	
	    //SORT IN-BUILT FUNCTION
	   /* Arrays.sort(array);
	     for(int a:array){
	        System.out.print(a+" ");
	    }
	    */
	    //O(N) -->ANOTHER GOOD FASTER METHOD
	  /* int zero=0,ones=0,twos = 0;
	    for(int i=0;i<n;i++){
	        if(array[i] == 0){
	            zero++;
	        }
	        else if(array[i] == 1){
	            ones++;
	        }
	        else if(array[i] ==2 ){
	            twos++;
	        }
	    }
	    int pos = 0;
	    int[] ans = new int[n];
	    while(zero>0){
	        ans[pos] = 0;
	        pos++;
	        zero--;
	    }
		    while(ones>0){
	        ans[pos] = 1;
	        pos++;
	        ones--;
	    }
		    while(twos>0){
	        ans[pos] = 2;
	        pos++;
	        twos--;
	    }
	    for(int a:ans){
	        System.out.print(a+" ");
	    }
	    */
	  }
	}
}

